# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - validators/st.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in
  1 ; copy statement/sample-2.in

  # type of test -- max M 
  # type 0 is a normal test, 1 is all ones, 2 is all evens, 3 is all odds
  any ; gen_random.py 0 1
  ones ; gen_random.py 1 1
  evens ; gen_random.py 2 1
  odds ; gen_random.py 3 1
  any ; gen_random.py 0 20
  ones ; gen_random.py 1 20
  evens ; gen_random.py 2 20
  odds ; gen_random.py 3 20
  any ; gen_random.py 0 48
  ones ; gen_random.py 1 48
  evens ; gen_random.py 2 48
  odds ; gen_random.py 3 48
