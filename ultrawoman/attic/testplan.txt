# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`

[Subtask 1]
  # (0, 1, 2), n_l n_r R_l R_r w_l w_r
  #Other tests
  1 ; gen_subtask1.py 0 10 100 1 1 4 40
  1 ; gen_subtask1.py 0 1000 10000 100 10 900 1001
  1 ; gen_subtask1.py 0 10000 100000 1000 10000 1000 10000
  1 ; gen_subtask1.py 0 99000 100000 99000 100000 500 1000
  1 ; gen_subtask1.py 1 10 100 1 1 4 40
  1 ; gen_subtask1.py 1 1000 10000 100 10 900 1001
  1 ; gen_subtask1.py 1 10000 100000 1000 10000 1000 10000
  1 ; gen_subtask1.py 1 9000 100000 99000 100000 500 1000
  1 ; gen_subtask1.py 2 50 100000 50 100000 40 50
  1 ; gen_subtask1.py 2 50 100000 50 100000 40 50
  
[Subtask 2]
  # (0, 1, 2), n_l n_r R_l R_r w_l w_r
  #Other tests
  2 ; gen_subtask2.py 0 10 100 1 1 4 40
  2 ; gen_subtask2.py 0 1000 10000 100 10 900 1001
  2 ; gen_subtask2.py 0 10000 100000 1000 10000 1000 10000
  2 ; gen_subtask2.py 0 99000 100000 99000 100000 500 1000
  2 ; gen_subtask2.py 1 10 100 1 1 4 40
  2 ; gen_subtask2.py 1 1000 10000 100 10 900 1001
  2 ; gen_subtask2.py 1 10000 100000 1000 10000 1000 10000
  2 ; gen_subtask2.py 1 9000 100000 99000 100000 500 1000
  2 ; gen_subtask2.py 2 50 100000 50 100000 40 50
  2 ; gen_subtask2.py 2 50 100000 50 100000 40 50
[Subtask 3]
  # (0, 1, 2), n_l n_r R_l R_r w_l w_r V_l V_r v_l v_r
  # Use sample data as test
  3 ; copy statement/sample-1.in
  3 ; copy statement/sample-2.in
  #Other tests
  3 ; gen_subtask34.py 0 
  3 ; gen_subtask34.py 0 
  3 ; gen_subtask34.py 0 
  3 ; gen_subtask34.py 0 
  3 ; gen_subtask34.py 1 
  3 ; gen_subtask34.py 1 
  3 ; gen_subtask34.py 1 
  3 ; gen_subtask34.py 1 
  3 ; gen_subtask34.py 2 
  3 ; gen_subtask34.py 2 
[Subtask 4]
  # (0, 1, 2), n_l n_r R_l R_r w_l w_r V_l V_r v_l v_r
  # Use sample data as test
  4 ; copy statement/sample-1.in
  4 ; copy statement/sample-2.in
  #Other tests
  4 ; gen_subtask34.py 0
  4 ; gen_subtask34.py 0
  4 ; gen_subtask34.py 0
  4 ; gen_subtask34.py 0
  4 ; gen_subtask34.py 1
  4 ; gen_subtask34.py 1
  4 ; gen_subtask34.py 1
  4 ; gen_subtask34.py 1
  4 ; gen_subtask34.py 2
  4 ; gen_subtask34.py 2
